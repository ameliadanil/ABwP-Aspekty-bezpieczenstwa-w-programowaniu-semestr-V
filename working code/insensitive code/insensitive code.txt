from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives import padding
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives.hashes import SHA256
from cryptography.hazmat.backends import default_backend
import os
import base64

# Funkcja do generowania klucza AES
def generate_key(password: str, salt: bytes) -> bytes:
    kdf = PBKDF2HMAC(
        algorithm=SHA256(),
        length=32,
        salt=salt,
        iterations=100000,
        backend=default_backend()
    )
    return kdf.derive(password.encode())

# Funkcja do szyfrowania tekstu
def encrypt_message(key: bytes, plaintext: str) -> (bytes, bytes):
    iv = os.urandom(16)  # Wektor inicjalizacyjny
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    encryptor = cipher.encryptor()

    # Dodanie paddingu
    padder = padding.PKCS7(algorithms.AES.block_size).padder()
    padded_data = padder.update(plaintext.encode()) + padder.finalize()

    ciphertext = encryptor.update(padded_data) + encryptor.finalize()
    return iv, ciphertext

# Funkcja do deszyfrowania tekstu
def decrypt_message(key: bytes, iv: bytes, ciphertext: bytes) -> str:
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    decryptor = cipher.decryptor()

    padded_data = decryptor.update(ciphertext) + decryptor.finalize()

    # Usunięcie paddingu
    unpadder = padding.PKCS7(algorithms.AES.block_size).unpadder()
    plaintext = unpadder.update(padded_data) + unpadder.finalize()
    return plaintext.decode()

# Przykład użycia
if __name__ == "__main__":
    password = "strongpassword"
    salt = os.urandom(16)

    key = generate_key(password, salt)
    print(f"Wygenerowany klucz: {base64.b64encode(key).decode()}")

    message = "To jest tajna wiadomość."
    print(f"Oryginalna wiadomość: {message}")

    iv, encrypted_message = encrypt_message(key, message)
    print(f"Zaszyfrowana wiadomość: {base64.b64encode(encrypted_message).decode()}")

    decrypted_message = decrypt_message(key, iv, encrypted_message)
    print(f"Odszyfrowana wiadomość: {decrypted_message}") 